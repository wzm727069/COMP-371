#version 440

layout(location = 0) in vec3 aPos;
layout(location = 1) in vec2 tex_coord;
layout(location = 2) in vec3 aNormal;

out vec3 Normal;
out vec3 FragPos;
out vec2 v_TexCoord;
out vec4 FragPosLightSpace;
out float visibility;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform mat4 lightSpaceMatrix;

const float density = 0.07;
const float gradient = 1.5;

void main()
{
	FragPos = vec3(model * vec4(aPos, 1.0));
	Normal = mat3(transpose(inverse(model))) * aNormal;
	v_TexCoord = tex_coord;
	FragPosLightSpace = lightSpaceMatrix * vec4(FragPos, 1.0);

	vec4 worldPosition = model * vec4(aPos, 1.0);
	vec4 positionRelativeToCam = view * worldPosition;
	
	//fog calculation credit ThinMatrix: https://www.youtube.com/watch?v=qslBNLeSPUc
	float distance = length(positionRelativeToCam.xyz);
	visibility = exp(-pow((distance*density),gradient));
	visibility = clamp(visibility,0.0,1.0);

	gl_Position = projection * view * worldPosition;
}